<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Martyn&#39;s Playground</title>
  <icon>https://www.gravatar.com/avatar/0cb3b8242a68ebe197e741d5ed43fad4</icon>
  <subtitle>A geek &amp; a dreamer</subtitle>
  <link href="http://www.martynwin.com/atom.xml" rel="self"/>
  
  <link href="http://www.martynwin.com/"/>
  <updated>2023-10-22T10:49:26.111Z</updated>
  <id>http://www.martynwin.com/</id>
  
  <author>
    <name>Martyn Ye</name>
    <email>martynwin@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode Summary</title>
    <link href="http://www.martynwin.com/2023/10/22/LeetCodeSummary/"/>
    <id>http://www.martynwin.com/2023/10/22/LeetCodeSummary/</id>
    <published>2023-10-22T09:37:37.000Z</published>
    <updated>2023-10-22T10:49:26.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problems-Summary"><a href="#Problems-Summary" class="headerlink" title="Problems Summary:"></a>Problems Summary:</h1><h2 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h2><ul><li><a href="https://leetcode.com/problems/count-complete-subarrays-in-an-array/">Count Complete Subarrays in an Array</a><blockquote><p><code>ans += (nums.size() - front);</code>  // with number of array possible ended with at pointer value of “front”, since every end between <em>nums size</em> and <em>front</em> are all valid</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problems-Summary&quot;&gt;&lt;a href=&quot;#Problems-Summary&quot; class=&quot;headerlink&quot; title=&quot;Problems Summary:&quot;&gt;&lt;/a&gt;Problems Summary:&lt;/h1&gt;&lt;h2 id=&quot;Sliding</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Summary" scheme="http://www.martynwin.com/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>Parallel Consumer Performance Improvement</title>
    <link href="http://www.martynwin.com/2023/10/11/parallel-availableworker-improvement/"/>
    <id>http://www.martynwin.com/2023/10/11/parallel-availableworker-improvement/</id>
    <published>2023-10-11T09:37:37.000Z</published>
    <updated>2023-10-14T13:59:12.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><blockquote><p>Parallel Consumer is an open source software to enable fast processing message with less instances<br> This article is to introduce the performance improvement for parallel consumer.</p></blockquote><h2 id="Work-Flow-Chart"><a href="#Work-Flow-Chart" class="headerlink" title="Work Flow Chart"></a>Work Flow Chart</h2><p><img src="/images/para_perf_improvement.jpg" alt="Main Workflow"></p><h2 id="Explanation："><a href="#Explanation：" class="headerlink" title="Explanation："></a>Explanation：</h2><ul><li>Previously to get the available workers, it has to go through all shards and get all workers and fill them out based on certain conditions</li><li>Now, we just to get from an atomic variable and it will be updated when the worker is newly-added / failed / finished</li><li>time improvement : O(n) -&gt; O(1)</li></ul><h2 id="PR"><a href="#PR" class="headerlink" title="PR"></a>PR</h2><p><a href="https://github.com/confluentinc/parallel-consumer/pull/644">https://github.com/confluentinc/parallel-consumer/pull/644</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Parallel Consumer is an open sour</summary>
      
    
    
    
    
    <category term="Open Source" scheme="http://www.martynwin.com/tags/Open-Source/"/>
    
  </entry>
  
  <entry>
    <title>Parallel Consumer General Overview</title>
    <link href="http://www.martynwin.com/2023/08/14/parallel-consumer/"/>
    <id>http://www.martynwin.com/2023/08/14/parallel-consumer/</id>
    <published>2023-08-14T09:37:37.000Z</published>
    <updated>2023-08-19T02:22:18.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><blockquote><p>Parallel Consumer is an open source software to enable fast processing message with less instances<br> This article is to introduce the internal mechanism to share.</p></blockquote><h2 id="Work-Flow-Chart"><a href="#Work-Flow-Chart" class="headerlink" title="Work Flow Chart"></a>Work Flow Chart</h2><p><img src="/images/parallel_consumer_overview.png" alt="Main Workflow"></p><p><img src="/images/parallel_consumer_partition_state.png" alt="Partition Events Workflow"></p><h2 id="Terminology："><a href="#Terminology：" class="headerlink" title="Terminology："></a>Terminology：</h2><p><strong>AbstractParallelEoSStreamProcessor</strong></p><ul><li>This is the main entry of parallel consumer</li><li>two main components : controlLoop &amp; BrokerPollSystem</li><li>will select the available work container to be applied on the user function</li></ul><p><strong>ControlLoop</strong></p><ul><li>check if the new records, if yes, then will create a new work container</li><li>if it is already processed, updated the offset and commit if needed </li></ul><p><strong>BrokerPollSystem</strong></p><ul><li>to poll consumer records from broker</li><li>check if throughput threshold has been reached, if reached, it will pause the consumer</li><li>will add to mailbox queue </li></ul><p><strong>WorkManager</strong></p><ul><li>Sharded, prioritised, offset managed, order controlled, delayed work queue</li><li>PartitionStateManager &amp;&amp; ShardManager</li></ul><p><strong>ShardManager</strong></p><ul><li>Shards are local queues of work to be processed.</li><li>maintain map of shards <code>Map&lt;ShardKey, ProcessingShard&lt;K, V&gt;&gt; processingShards</code></li></ul><p><strong>PartitionStateManager</strong></p><ul><li>maintain map of PartitionState <code>Map&lt;TopicPartition, PartitionState&lt;K, V&gt;&gt; partitionStates</code></li><li>Record the generations of partition assignment, for fencing off invalid work <code>Map&lt;TopicPartition, Long&gt; partitionsAssignmentEpochs</code></li></ul><p><strong>PartitionState</strong></p><ul><li>incompleteOffsets: <code>Offsets beyond the highest committable offset (see getOffsetHighestSequentialSucceeded()) which haven&#39;t totally succeeded. Based on decoded metadata and polled records (not offset ranges)</code></li><li>dirty: <code>if there are offsets to be committed</code></li><li>partitionsAssignmentEpoch: <code>from PartitionStateManager</code></li></ul><p><strong>WorkContainer</strong></p><ul><li>consumer record</li><li>epoch : <code>if stale worker</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Parallel Consumer is an open sour</summary>
      
    
    
    
    
    <category term="Open Source" scheme="http://www.martynwin.com/tags/Open-Source/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Maximum XOR of Two Numbers in an Array</title>
    <link href="http://www.martynwin.com/2016/11/06/MaximumXORofTwoNumbersinanArray/"/>
    <id>http://www.martynwin.com/2016/11/06/MaximumXORofTwoNumbersinanArray/</id>
    <published>2016-11-06T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>define a trie with two elements to show the bit status. And walk through the trie to find the sum of <code>i^1</code></p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.vec = [<span class="literal">None</span> <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMaximumXOR</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        maxsum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        root = Trie()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            curNode = root</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">31</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                curIdx = (num &gt;&gt; i) &amp; <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> curNode.vec[curIdx] == <span class="literal">None</span>:</span><br><span class="line">                    curNode.vec[curIdx] = Trie()</span><br><span class="line">                curNode = curNode.vec[curIdx]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            cursum = <span class="number">0</span></span><br><span class="line">            curNode = root</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">31</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                idx = (num &gt;&gt; i) &amp; <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> curNode.vec[idx^<span class="number">1</span>] != <span class="literal">None</span>:</span><br><span class="line">                    cursum += (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">                    curNode = curNode.vec[idx^<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    curNode = curNode.vec[idx]</span><br><span class="line">            maxsum = <span class="built_in">max</span>(maxsum, cursum)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxsum</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;define a trie with two elements</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Trie" scheme="http://www.martynwin.com/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>Beyond Compare Pro for Mac 破解 无限试用</title>
    <link href="http://www.martynwin.com/2016/10/23/BeyondCompareCrack/"/>
    <id>http://www.martynwin.com/2016/10/23/BeyondCompareCrack/</id>
    <published>2016-10-23T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="此方法请测有效，重度BC依赖者福音，再不怕重启MAC了"><a href="#此方法请测有效，重度BC依赖者福音，再不怕重启MAC了" class="headerlink" title="此方法请测有效，重度BC依赖者福音，再不怕重启MAC了"></a>此方法请测有效，重度BC依赖者福音，再不怕重启MAC了</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf <span class="string">&quot;/Users/<span class="subst">$(whoami)</span>/Library/Application Support/Beyond Compare/registry.dat&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;此方法请测有效，重度BC依赖者福音，再不怕重启MAC了&quot;&gt;&lt;a href=&quot;#此方法请测有效，重度BC依赖者福音，再不怕重启MAC了&quot; class=&quot;headerlink&quot; title=&quot;此方法请测有效，重度BC依赖者福音，再不怕重启MAC了&quot;&gt;&lt;/a&gt;此方法请测</summary>
      
    
    
    
    
    <category term="Misc" scheme="http://www.martynwin.com/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Third Maximum Number</title>
    <link href="http://www.martynwin.com/2016/10/22/ThirdMaximumNumber/"/>
    <id>http://www.martynwin.com/2016/10/22/ThirdMaximumNumber/</id>
    <published>2016-10-22T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>simple question, should pay attention to the constraints to make sure, the same numbers will<br>not fall to the next level</p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(1)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">thirdMax</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        firstmax, secondmax, thirdmax = -sys.maxint, -sys.maxint, -sys.maxint</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> n &gt; firstmax:</span><br><span class="line">                thirdmax = secondmax</span><br><span class="line">                secondmax = firstmax</span><br><span class="line">                firstmax = n</span><br><span class="line">            <span class="keyword">elif</span> n &gt; secondmax <span class="keyword">and</span> n &lt; firstmax:</span><br><span class="line">                thirdmax = secondmax</span><br><span class="line">                secondmax = n</span><br><span class="line">            <span class="keyword">elif</span> n &gt; thirdmax <span class="keyword">and</span> n &lt; secondmax:</span><br><span class="line">                thirdmax = n</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thirdmax <span class="keyword">if</span> thirdmax != -sys.maxint <span class="keyword">else</span> firstmax</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;simple question, should pay att</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Array" scheme="http://www.martynwin.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Flatten 2D Vector</title>
    <link href="http://www.martynwin.com/2016/10/09/Flatten2DVector/"/>
    <id>http://www.martynwin.com/2016/10/09/Flatten2DVector/</id>
    <published>2016-10-09T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>Pay attention that list may contain <code>null</code>, so the length should be calculated beforehand and skip the null value</p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector2D</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vec2d</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        :type vec2d: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.curx, self.cury = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        self.vec2d = vec2d</span><br><span class="line">        self.cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(vec2d)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="built_in">len</span>(vec2d[i])):</span><br><span class="line">                self.cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> self.cury &lt; <span class="built_in">len</span>(self.vec2d) <span class="keyword">and</span> <span class="built_in">len</span>(self.vec2d[self.cury]) == <span class="number">0</span>:</span><br><span class="line">            self.cury += <span class="number">1</span></span><br><span class="line">        retval = self.vec2d[self.cury][self.curx]</span><br><span class="line">        <span class="keyword">if</span> self.curx+<span class="number">1</span> &lt; <span class="built_in">len</span>(self.vec2d[self.cury]):</span><br><span class="line">            self.curx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.curx = <span class="number">0</span></span><br><span class="line">            self.cury += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.cnt -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> retval</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hasNext</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span>  self.cnt &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Pay attention that list may con</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Design" scheme="http://www.martynwin.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Largest BST Subtree</title>
    <link href="http://www.martynwin.com/2016/09/15/LargestBSTSubtree/"/>
    <id>http://www.martynwin.com/2016/09/15/LargestBSTSubtree/</id>
    <published>2016-09-15T13:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>use <code>count</code> and <code>low</code> and <code>high</code> to mark the boundaries of every left-subtree and right-subtree.<br>use <code>global_max</code> to record the maximum value </p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findLargestHelper</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>, <span class="number">1</span>, root.val, root.val</span><br><span class="line"></span><br><span class="line">        lcnt, lmax, llow, lhigh = <span class="number">0</span>, <span class="number">0</span>, root.val, root.val</span><br><span class="line">        rcnt, rmax, rlow, rhigh = <span class="number">0</span>, <span class="number">0</span>, root.val, root.val</span><br><span class="line">        <span class="keyword">if</span> root.left != <span class="literal">None</span>:</span><br><span class="line">            lcnt, lmax, llow, lhigh = self.findLargestHelper(root.left)</span><br><span class="line">        <span class="keyword">if</span> root.right != <span class="literal">None</span>:</span><br><span class="line">            rcnt, rmax, rlow, rhigh = self.findLargestHelper(root.right)</span><br><span class="line"></span><br><span class="line">        curcnt, curmax = -<span class="number">1</span>, <span class="built_in">max</span>(lmax, rmax)</span><br><span class="line">        <span class="keyword">if</span> root.val &gt;= lhigh <span class="keyword">and</span> root.val &lt;= rlow:</span><br><span class="line">            <span class="keyword">if</span> lcnt &gt; -<span class="number">1</span> <span class="keyword">and</span> rcnt &gt; -<span class="number">1</span>:</span><br><span class="line">                curcnt = lcnt + rcnt + <span class="number">1</span></span><br><span class="line">                curmax = <span class="built_in">max</span>(curmax, curcnt)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> curcnt, curmax, llow, rhigh</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">largestBSTSubtree</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        curcnt, curmax = -<span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        curcnt, curmax, _, _ = self.findLargestHelper(root)</span><br><span class="line">        <span class="keyword">return</span> curmax</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;use &lt;code&gt;count&lt;/code&gt; and &lt;cod</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Tree" scheme="http://www.martynwin.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Integer Replacement</title>
    <link href="http://www.martynwin.com/2016/09/15/IntegerReplacement/"/>
    <id>http://www.martynwin.com/2016/09/15/IntegerReplacement/</id>
    <published>2016-09-15T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>treat it as a tree, find the path to the leaf with minimum hops</p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">integerReplacement</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.integerReplacement(n/<span class="number">2</span>)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(self.integerReplacement(n-<span class="number">1</span>), self.integerReplacement(n+<span class="number">1</span>)) + <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;treat it as a tree, find the pa</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Math" scheme="http://www.martynwin.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Linked List Random Node</title>
    <link href="http://www.martynwin.com/2016/09/08/LinkedListRandomNode/"/>
    <id>http://www.martynwin.com/2016/09/08/LinkedListRandomNode/</id>
    <published>2016-09-08T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>Using Reservior sampling. Continuously sampling from the list and find an element that met<br><code>rand(0, cnt) &lt; k</code></p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(1)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x</span>):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, head</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        @param head The linked list&#x27;s head.</span></span><br><span class="line"><span class="string">        Note that the head is guaranteed to be not null, so it contains at least one node.</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.head = head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getRandom</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns a random node&#x27;s value.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        k = <span class="number">1</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        retNode = <span class="number">0</span></span><br><span class="line">        curnode = self.head</span><br><span class="line">        <span class="keyword">while</span> curnode <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cnt &lt; k:</span><br><span class="line">                retNode = curnode.val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rrand = random.randint(<span class="number">0</span>, cnt)</span><br><span class="line">                <span class="keyword">if</span> rrand &lt; k:</span><br><span class="line">                    retNode = curnode.val</span><br><span class="line"></span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            curnode = curnode.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> retNode</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Using Reservior sampling. Conti</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Reservoir Sampling" scheme="http://www.martynwin.com/tags/Reservoir-Sampling/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Lexicographical Numbers</title>
    <link href="http://www.martynwin.com/2016/08/24/LexicographicalNumbers/"/>
    <id>http://www.martynwin.com/2016/08/24/LexicographicalNumbers/</id>
    <published>2016-08-23T23:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>there are two layers: first determine the base number from [1-9], then DFS through all combinations</p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfsHelper</span>(<span class="params">self, base, n, retlist</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">            curnum = base*<span class="number">10</span> + i</span><br><span class="line">            <span class="keyword">if</span> curnum &lt;= n:</span><br><span class="line">                retlist.append(curnum)</span><br><span class="line">                self.dfsHelper(curnum, n, retlist)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lexicalOrder</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        retlist = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> i &lt;= n:</span><br><span class="line">                retlist.append(i)</span><br><span class="line">                self.dfsHelper(i, n , retlist)</span><br><span class="line">        <span class="keyword">return</span> retlist</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;there are two layers: first det</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Depth First Search" scheme="http://www.martynwin.com/tags/Depth-First-Search/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Binary Tree Upside Down</title>
    <link href="http://www.martynwin.com/2016/08/23/BinaryTreeUpsideDown/"/>
    <id>http://www.martynwin.com/2016/08/23/BinaryTreeUpsideDown/</id>
    <published>2016-08-22T23:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><ul><li>You should use recursion and treat every three nodes as a group</li><li>Then you can find that the left most node must be the root, then we return it as parent node</li><li>remember to reset root’s left node and right node to NULL</li></ul></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">self, root</span>):</span><br><span class="line"><span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span> root, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span> root, root</span><br><span class="line"></span><br><span class="line">parent, newroot = self.helper(root.left)</span><br><span class="line">parent.right = root</span><br><span class="line">parent.left = root.right</span><br><span class="line">root.left, root.right = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"><span class="keyword">return</span> parent.right, newroot</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upsideDownBinaryTree</span>(<span class="params">self, root</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">:type root: TreeNode</span></span><br><span class="line"><span class="string">:rtype: TreeNode</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">newroot = <span class="literal">None</span></span><br><span class="line">__ , newroot = self.helper(root)</span><br><span class="line"><span class="keyword">return</span> newroot</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;You should use recursion </summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Binary Tree" scheme="http://www.martynwin.com/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Next Permutation</title>
    <link href="http://www.martynwin.com/2016/08/21/NextPermutation/"/>
    <id>http://www.martynwin.com/2016/08/21/NextPermutation/</id>
    <published>2016-08-21T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><ol><li>find <code>j</code> in array in reverse order that nums[j]&lt;nums[j+1]</li><li>find the first element that nums[i]&gt;nums[j]</li><li>swap the elements nums[i], nums[j]</li><li>reverse nums[j+1:]</li></ol></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(1)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextPermutation</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        lens = <span class="built_in">len</span>(nums)</span><br><span class="line">        j = lens-<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[j] &gt;= nums[j+<span class="number">1</span>]:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> j &lt; <span class="number">0</span>:</span><br><span class="line">            nums.reverse()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        i = lens-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &gt; j <span class="keyword">and</span> nums[i] &lt;= nums[j]:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">        nums[j+<span class="number">1</span>:] = <span class="built_in">reversed</span>(nums[j+<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;find &lt;code&gt;j&lt;/code&gt; in ar</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="array" scheme="http://www.martynwin.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Maximum Size Subarray Sum Equals k</title>
    <link href="http://www.martynwin.com/2016/08/18/MaximumSizeSubarraySumEqualsK/"/>
    <id>http://www.martynwin.com/2016/08/18/MaximumSizeSubarraySumEqualsK/</id>
    <published>2016-08-18T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>use a dict to store sum of range sum as key and index as value<br>we can check if the remaining in the dict. If so, find the largest gap of them.</p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArrayLen</span>(<span class="params">self, nums, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        sumstore = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        cursum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(nums)):</span><br><span class="line">            cursum += nums[i]</span><br><span class="line">            sumstore[cursum].append(i)</span><br><span class="line"></span><br><span class="line">        retval = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> sumstore.keys():</span><br><span class="line">            <span class="keyword">if</span> t == k:</span><br><span class="line">                retval = <span class="built_in">max</span>(retval, sumstore[t][-<span class="number">1</span>]+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> t-k <span class="keyword">in</span> sumstore:</span><br><span class="line">                retval = <span class="built_in">max</span>(retval, sumstore[t][-<span class="number">1</span>]-sumstore[t-k][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> retval </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;use a dict to store sum of rang</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Hash Table" scheme="http://www.martynwin.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Shuffle an Array</title>
    <link href="http://www.martynwin.com/2016/08/16/ShuffleArray/"/>
    <id>http://www.martynwin.com/2016/08/16/ShuffleArray/</id>
    <published>2016-08-16T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>The method to solve this problem, please refer to <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm">Fisher–Yates shuffle</a></p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type size: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.orig = nums[:]</span><br><span class="line">        self.curstr = nums[:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Resets the array to its original configuration and return it.</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.curstr[:] = self.orig</span><br><span class="line">        <span class="keyword">return</span> self.orig</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shuffle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns a random shuffling of the array.</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        lens = <span class="built_in">len</span>(self.curstr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(lens-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            j = random.randint(<span class="number">0</span>, i)</span><br><span class="line">            self.curstr[i], self.curstr[j] = self.curstr[j], self.curstr[i]</span><br><span class="line">        <span class="keyword">return</span> self.curstr</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;The method to solve this proble</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Math" scheme="http://www.martynwin.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Insert Delete GetRandom O(1) - Duplicates allowed</title>
    <link href="http://www.martynwin.com/2016/08/14/insert-delete-getrandom-o1-duplicates-allowed/"/>
    <id>http://www.martynwin.com/2016/08/14/insert-delete-getrandom-o1-duplicates-allowed/</id>
    <published>2016-08-14T10:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>use set in defaultdict to store the index</p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(1)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedCollection</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.storemap = collections.defaultdict(<span class="built_in">set</span>)</span><br><span class="line">        self.vec = []</span><br><span class="line">        self.lens = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        retval = <span class="literal">True</span> <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> self.storemap <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        self.storemap[val].add(self.lens)</span><br><span class="line">        self.vec.append(val)</span><br><span class="line">        self.lens += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> retval</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Removes a value from the collection. Returns true if the collection contained the specified element.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> self.storemap:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        idx = self.storemap[val].pop()</span><br><span class="line">        tail = self.vec[-<span class="number">1</span>]</span><br><span class="line">        self.vec[idx] = tail</span><br><span class="line">        self.storemap[tail].add(idx)</span><br><span class="line">        self.storemap[tail].remove(self.lens-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">del</span> self.vec[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.storemap[val]:</span><br><span class="line">            <span class="keyword">del</span> self.storemap[val]</span><br><span class="line">        self.lens -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getRandom</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get a random element from the collection.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> random.choice(self.vec)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;use set in defaultdict to store</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="System Design" scheme="http://www.martynwin.com/tags/System-Design/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Insert Delete GetRandom O(1)</title>
    <link href="http://www.martynwin.com/2016/08/14/insert-delete-getrandom-o1/"/>
    <id>http://www.martynwin.com/2016/08/14/insert-delete-getrandom-o1/</id>
    <published>2016-08-14T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>define a dictionary to store the elements and a vector to store the index of them.<br>the key of removal is to move the tail element to the slot of removal element and update the tail element index.</p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(1)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.storemap = collections.defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        self.vec = []</span><br><span class="line">        self.lens = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Inserts a value to the set. Returns true if the set did not already contain the specified element.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> self.storemap:</span><br><span class="line">            self.storemap[val] = self.lens</span><br><span class="line">            self.vec.append(val)</span><br><span class="line">            self.lens += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Removes a value from the set. Returns true if the set contained the specified element.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">in</span> self.storemap:</span><br><span class="line">            idx = self.storemap[val]</span><br><span class="line">            tail = self.vec.pop()</span><br><span class="line">            <span class="keyword">if</span> idx &lt; <span class="built_in">len</span>(self.vec):</span><br><span class="line">                self.vec[idx] = tail</span><br><span class="line">                self.storemap[tail] = idx</span><br><span class="line">            <span class="keyword">del</span> self.storemap[val]</span><br><span class="line">            self.lens -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getRandom</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get a random element from the set.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> random.choice(self.vec)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;define a dictionary to store th</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="System Design" scheme="http://www.martynwin.com/tags/System-Design/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Combination Sum IV</title>
    <link href="http://www.martynwin.com/2016/07/26/CombinationSumIV/"/>
    <id>http://www.martynwin.com/2016/07/26/CombinationSumIV/</id>
    <published>2016-07-26T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>define a array dp[i] to depict the possible combination of <code>i</code>, then we have<br>if <code>i+j &lt;= target</code> then <code>dp[i+j] += dp[i]</code></p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n^2)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combinationSum4</span>(<span class="params">self, nums, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dp = [<span class="number">0</span>] * (target+<span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(target+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> x + y &lt;= target:</span><br><span class="line">                    dp[x+y] += dp[x]</span><br><span class="line">        <span class="keyword">return</span> dp[target]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;define a array dp[i] to depict </summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Dynamic Programming" scheme="http://www.martynwin.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Find K Pairs with Smallest Sums</title>
    <link href="http://www.martynwin.com/2016/07/08/FindKPairsSmallestSums/"/>
    <id>http://www.martynwin.com/2016/07/08/FindKPairsSmallestSums/</id>
    <published>2016-07-08T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>using a heap to store the sum numbers, using a two-dimensional array to mark the visited pairs,<br>also using a defaultdict to store the indexes.</p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(nlogn)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">kSmallestPairs</span>(<span class="params">self, nums1, nums2, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums1: List[int]</span></span><br><span class="line"><span class="string">        :type nums2: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        vec = []</span><br><span class="line">        retlist = []</span><br><span class="line">        dx, dy = [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums1) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(nums2) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> retlist</span><br><span class="line">        storeMap = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">        len1, len2 = <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line"></span><br><span class="line">        visited = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> xrange(len2)] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len1)]</span><br><span class="line">        visited[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        vec.append(nums1[<span class="number">0</span>]+nums2[<span class="number">0</span>])</span><br><span class="line">        storeMap[nums1[<span class="number">0</span>]+nums2[<span class="number">0</span>]].append([<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        heapq.heapify(vec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(vec) &gt; <span class="number">0</span> <span class="keyword">and</span> k &gt; <span class="number">0</span>:</span><br><span class="line">            cur = heapq.heappop(vec)</span><br><span class="line">            idx1, idx2 = storeMap[cur][<span class="number">0</span>][<span class="number">0</span>], storeMap[cur][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">            storeMap[cur].pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            retlist.append([nums1[idx1], nums2[idx2]])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">2</span>):</span><br><span class="line">                x, y = idx1+dx[i], idx2+dy[i]</span><br><span class="line">                <span class="keyword">if</span> x &lt; len1 <span class="keyword">and</span> y &lt; len2 <span class="keyword">and</span> visited[x][y] == <span class="number">0</span>:</span><br><span class="line">                    heapq.heappush(vec, nums1[x]+nums2[y])</span><br><span class="line">                    storeMap[nums1[x]+nums2[y]].append([x, y])</span><br><span class="line">                    visited[x][y] = <span class="number">1</span></span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retlist</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;using a heap to store the sum n</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Heap" scheme="http://www.martynwin.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] Largest Divisible Subset</title>
    <link href="http://www.martynwin.com/2016/06/28/LargestDivisibleSubset/"/>
    <id>http://www.martynwin.com/2016/06/28/LargestDivisibleSubset/</id>
    <published>2016-06-28T09:37:37.000Z</published>
    <updated>2023-08-13T09:03:24.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis:"></a>Analysis:</h2><blockquote><p>we must sort the list first. According to the rule: <strong>if b%a == 0 c%b == 0, then c%a == 0</strong><br>we can refer to the Longest Increasing Sequence and using a <code>parents</code> array to represent the subset</p></blockquote><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity:"></a>Time Complexity:</h2><blockquote><ul><li>O(n^2)</li></ul></blockquote><h2 id="Space-Complexity："><a href="#Space-Complexity：" class="headerlink" title="Space Complexity："></a>Space Complexity：</h2><blockquote><ul><li>O(n)</li></ul></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">largestDivisibleSubset</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        dp = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n)]</span><br><span class="line">        curnums = <span class="built_in">sorted</span>(nums)</span><br><span class="line">        parents = [-<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(i):</span><br><span class="line">                <span class="keyword">if</span> curnums[i] % curnums[j] == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> dp[i] &lt; dp[j]+<span class="number">1</span>:</span><br><span class="line">                        dp[i] = dp[j]+<span class="number">1</span></span><br><span class="line">                        parents[i] = j</span><br><span class="line"></span><br><span class="line">        retlist = []</span><br><span class="line">        maxidx, maxval = <span class="number">0</span>, dp[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span><br><span class="line">            <span class="keyword">if</span> dp[i] &gt; maxval:</span><br><span class="line">                maxval = dp[i]</span><br><span class="line">                maxidx = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> maxidx &gt;= <span class="number">0</span>:</span><br><span class="line">            retlist.append(curnums[maxidx])</span><br><span class="line">            <span class="keyword">if</span> parents[maxidx] == -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                maxidx = parents[maxidx]</span><br><span class="line">        <span class="keyword">return</span> retlist</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Analysis&quot;&gt;&lt;a href=&quot;#Analysis&quot; class=&quot;headerlink&quot; title=&quot;Analysis:&quot;&gt;&lt;/a&gt;Analysis:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;we must sort the list first. Ac</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="http://www.martynwin.com/tags/LeetCode/"/>
    
    <category term="Dynamic Programming" scheme="http://www.martynwin.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
</feed>
